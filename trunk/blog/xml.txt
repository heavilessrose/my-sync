解析为什么重要？因为所有 XML 处理都从解析开始。
解析文档时面临的第一个选择是采用现成的解析库（基本上每种编程语言都有，包括 COBOL [Common Business Oriented Language]）还是自己创建一个。答案非常简单：选择现成的库。

多数解析器提供了至少两种 API，通常是一个对象模型  API 和一个事件 API（也称为流 API）。比如，Java 平台同时提供了 DOM（文档对象模型）和 SAX（Simple API for XML）。
这两套 API 提供了相同的服务：文档解码、可选的验证、名称空间解析等等。差别不在于服务而在于 API 使用的数据模型。


对象模型 API 定义了层次化对象模型来表示 XML 文档。换句话说，对应 XML 语法中的每个概念定义相应的类：元素、属性、实体、文档。解析器读入 XML 文档的时候，建立 XML 语法和类之间的一对一映射。比如，每遇到一个标记，就实例化一个元素类。


流式 API 有两种形式：推式和拉式。从历史上看，推式方法更加流行，因为这正是 SAX 采用的模型。推式方法正在实现标准化，很快将作为 StAX 集成到 Java 平台中。

两者有什么区别呢？区别在于由谁控制读循环。和读取文件的任何软件一样，解析器也是围绕着读循环（读入文件的循环）创建的。

在推 模式（SAX）下，解析器控制循环。实际上应用程序调用解析器的时候，在文件结束之前控制权不会返回给应用程序。前面已经提到，解析器回调应用程序以建立数据模型，解析器处于控制地位。

在拉 模式下，应用程序控制循环。循环中应用程序负责反复调用解析器，直到文件结束。

推模式最适合边读入边处理 XML 文档，比如读入 RSS 提要并显示为 HTML 网页。对于使用 XML 存储数据的多数应用程序来说，“读文档”用对解析器的一次调用实现最方便。

拉模式更适合于处理不同 XML 词汇表的文档。这类应用程序通常需要嗅探输入（读入前几行）以根据词汇表决定调用子例程。

对于控制解析器的应用程序而言，一次循环是必要的，因为应用程序很容易在嗅探前面几行之后停止读入。