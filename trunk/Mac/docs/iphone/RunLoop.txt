在app的环境下，系统会自动启动run loop，并初始化，按键事件的处理，定时器，刷屏等依赖于run loop的循环处理环境，
而在daemon的环境下，run loop并不会自动启动，需要手动来启动，
当然也可以自己建立一套事件循环处理机制，不过目前找到的定时器接口依赖于系统的run loop机制，
还有一些其他的高级接口也可能依赖于此，所以最好使用系统的

第一步：创建  
 + (NSRunLoop *)currentRunLoop，该函数会返回当前线程的run loop，如果没有，则创建
第二步：创建事件源
CFRunLoopSourceRef CFRunLoopSourceCreate ( CFAllocatorRef allocator,CFIndex order,CFRunLoopSourceContext *context)
第三步：添加事件源到run loop
void CFRunLoopAddSource (CFRunLoopRef rl, CFRunLoopSourceRef source, CFStringRef mode)
第四步：启动run loop
- (void)run,启动run loop前必须先添加事件源，否则run loop会立即返回


http://developer.apple.com/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html


Run-loop 
It is a loop your thread enters and uses to run event handlers in response to incoming events. Your code provides the control statements used to implement the actual loop portion of the run loop—in other words, your code provides the while or for loop that drives the run loop. Within your loop, you use a run loop object to "run” the event-processing code that receives events and calls the installed handlers.

 A run loop is an event processing loop that you use to schedule work and coordinate the receipt of incoming events. The purpose of a run loop is to keep your thread busy when there is work to do and put your thread to sleep when there is none.
run loop 是一个循环（实质上应该是一个线程），应用线程可进入并执行事件处理。在这个循环中使用run loop对象来运行事件处理代码。提供异步或同步的事件处理。

事件源有两种：
	Input sources：异步的方式传递事件。通常消息来自另一个线程或不同的应用。
	Timer sources：同步的方式传递事件。在一个scheduled time或时间间隔时发生。
run-loop也产生notifications。注册run-loop observers来接收这些通知来做其他的处理。


Run-Loop Modes
run loop mode是要监控的input souces和timers以及要通知的run loop observer的集合。
每次运行run loop都需要直接或隐含的指定一个运行的mode。这样只有那些与这个mode相关的sources才会被监控和允许传递他们的事件。类似的只有与此mode相关的observer会被通知。

使用run loop mode可以起到过滤掉不需要的source。

已定义的modes：（mode可自定义）
Dfault、Connection、Modal、Event tracking、Common modes。

