// Variable length File: variable length record file layout
//
// 1) start out with a fixed number of fixed sized segments
//    example: 4 x 64 bytes
//
// each record occupies 1 of the 4 segments
//
// array index:                  0    1    2
// exponent:                     -    -    0
// - file config section lists: (64 x 4) x 1, array index is at 2
//   1 == 2^0, 1 is at 0th exponent position
//   64 and 4 are not counted as exponent positions
//   exponent positions are counted from 0 starting from the 3rd index of
//   the file config array
//
// - existing page size is 64 x 4 x 2^0, (from above: 1 == 2^0)
// if more than 4 records are added then another page is incremented
// - file config section lists: (64 x 4) x 2
//
// 64 		x 	4	x	2
// seg. size            run		page no.
//
//   2 means: 2 pages of 64 x 4 x 2^0 bytes each
//
// page size = 64 x 4 x 2^0
// each page has 4 x 2^0 segments
// record # starts from 0
// 7th record == record #6
//
// Record size is calculated as: 2^(Index - 2) * FileConfig[0]
// Total number of records available is calculated as:
//   FileConfig[1] x ... x FileConfig[Index]
//
//--------------------------------------------
// ;;; nst = nesting value
// ;;; spp = segments perpage
// ;;; pn = page number
// ;;; rs = record seek
// ;;; ps = page seek
// ;;; ss = segment size
// ;;; rn = record number
// ;;; np = number of pages
//
// to access the 5th record:
// 64 x ((1 x (4 x 1)) + (4 - (1 x (4 x 1))))
// = 64 x (4 + 0)
// = 256
// formula: ss x ((pn x spp) + (rn - (pn x spp)))
//
// Index := 2, (array index is at 2: [64][4][2] see above)
// nst = 2^(Index - 2)
// spp = FileConfig[1] x nst
// rn = Record - 1
// pn = rn / (spp / nst)
// ps = pn x spp
// np = FileConfig[2]
// rs = rn - (pn x spp)
// ss = FileConfig[0]
//
// - if a record needs more than 64 bytes then the block-run of 4
//   segments, it is doubled producing a page size of:
//   (ss x spp x np) x 2 =
//   64 x 4 x 2^0 x 2 x 2 =
//   64 x 4 x 1 x 2 x 2 =
//   64 x 16 = 1024
//
// array index:                 0    1   2   3
// exponent:                    -    -   0   1
// - file config section lists: 64 x 4 x 2 x 1, array index is at 3
//   2 == 2^1, 1 is at 1st exponent position, start counting exponents from
//   the 3rd index of the array
//
// ;;; nst2 = nesting value, 2nd cluster
// ;;; spp2 = segments perpage, 2nd cluster
// ;;; pn2 = page number, 2nd cluster
// ;;; cs2 = cluster seek, 2nd cluster
// ;;; ps2 = page seek, 2nd cluster
// ;;; rn2 = record number, 2nd cluster
// ;;; np2 = number of pages, 2nd cluster
//
// ;;; nst = nesting value, 1st cluster
// ;;; spp = segments perpage, 1st cluster
// ;;; pn = page number, 1st cluster
// ;;; ps = page seek, 1st cluster
// ;;; rn = record number, 1st cluster
// ;;; np = number of pages, 1st cluster
// ;;; rs = record seek
// ;;; ss = segment size
//
// To read the entire 6th record it is done in 2 parts:
// 64 x ((0 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0 + (1 x (4 x 1)) + (5 - (1 x (4 x 1))))
// 64 x ((0 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1 + (1 x (4 x 1)) + (5 - (1 x (4 x 1))))
// = 64 x (0 + 0 + 4 + 1)
// = 320
// = 64 x (0 + 8 + 4 + 1)
// = 832
// Formula:
// seek1: ss x ((pn2 x spp2) + (spp2 / 2) x 0 + (pn x spp) +
//              (rn - (pn x spp)))
// seek2: ss x ((pn2 x spp2) + (spp2 / 2) x 1 + (pn x spp) +
//              (rn - (pn x spp)))
//
// Index2 := 3
// nst2 = 2^(Index2 - 2)
// spp2 = FileConfig[1] x FileConfig[2] x nst2
// rn2 = Record - 1
// pn2 = rn2 / (spp2 / nst2)
// ps2 = pn2 x spp2
// cs2 = (spp2 / 2) x 0, (spp2 / 2) x 1
// np2 = FileConfig[3]
//
// Index := 2
// nst = 2^(Index - 2)
// spp = FileConfig[1] x nst
// rn = rn2 modulo (spp2 / nst2)
// pn = rn / (spp / nst)
// ps = pn x spp
// np = FileConfig[2]
// rs = rn - (pn x spp)
// ss = FileConfig[0]
//
// To add more records without increasing the size of the records:
// - increment the number of pages
//
// example adding 11th record
//
// array index:                 0    1   2   3
// exponent:                    -    -   0   1
// - file config section lists: 64 x 4 x 2 x 2
//
// seek1: ss x ((pn2 x spp2) + (spp2 / 2) x 0 + (pn x spp) +
//              (rn - (pn x spp)))
// seek2: ss x ((pn2 x spp2) + (spp2 / 2) x 1 + (pn x spp) +
//              (rn - (pn x spp)))
// seek1 = 64 x ((1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0 +
//               (0 x (4 x 1)) + (2 - (0 x (4 x 1))))
// = 64 x (16 + 0 + 0 + 2)
// = 1152
// seek2 = 64 x ((1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1 +
//               (0 x (4 x 1)) + (2 - (0 x (4 x 1))))
// = 64 x (16 + 8 + 0 + 2)
// = 1664
//
// To add a record of increased size double the existing pages
// for example a 256 byte record:
//
// array index:                 0    1   2   3   4
// exponent:                    -    -   0   1   2
// - file config section lists: 64 x 4 x 2 x 2 x 1
//   4 == 2^2, 1 is at 2nd exponent position, start counting exponents from
//   the 3rd array index
//
// ;;; nst3 = nesting value, 3rd cluster
// ;;; spp3 = segments perpage, 3rd cluster
// ;;; pn3 = page number, 3rd cluster
// ;;; cs3 = cluster seek, 3rd cluster
// ;;; ps3 = page seek, 3rd cluster
// ;;; rn3 = record number, 3rd cluster
// ;;; np3 = number of pages, 3rd cluster
//
// ;;; nst2 = nesting value, 2nd cluster
// ;;; spp2 = segments perpage, 2nd cluster
// ;;; pn2 = page number, 2nd cluster
// ;;; cs2 = cluster seek, 2nd cluster
// ;;; ps2 = page seek, 2nd cluster
// ;;; rn2 = record number, 2nd cluster
// ;;; np2 = number of pages, 2nd cluster
//
// ;;; nst = nesting value, 1st cluster
// ;;; spp = segments perpage, 1st cluster
// ;;; pn = page number, 1st cluster
// ;;; ps = page seek, 1st cluster
// ;;; rn = record number, 1st cluster
// ;;; np = number of pages, 1st cluster
// ;;; rs = record seek
// ;;; ss = segment size
//
// Reading a record of the maximum 256 byte size is now done in 4 parts
// Example: Reading the 14th record
// seek1: ss x ((pn3 x spp3) + (spp3 / 2) x 0 + (pn2 x spp2) +
//              (spp2 / 2) x 0 + (pn x spp) + (rn - (pn x spp)))
// seek2: ss x ((pn3 x spp3) + (spp3 / 2) x 0 + (pn2 x spp2) +
//              (spp2 / 2) x 1 + (pn x spp) + (rn - (pn x spp)))
// seek3: ss x ((pn3 x spp3) + (spp3 / 2) x 1 + (pn2 x spp2) +
//              (spp2 / 2) x 0 + (pn x spp) + (rn - (pn x spp)))
// seek4: ss x ((pn3 x spp3) + (spp3 / 2) x 1 + (pn2 x spp2) +
//              (spp2 / 2) x 1 + (pn x spp) + (rn - (pn x spp)))
//
// Index3 := 4
// nst3 = 2^(Index3 - 2)
// spp3 = FileConfig[1] x FileConfig[2] x FileConfig[3] x nst3
// rn3 = Record - 1
// pn3 = rn3 / (spp3 / nst3)
// ps3 = pn3 x spp3
// cs3 = (spp3 / 2) x 0, (spp3 / 2) x 1
// np3 = FileConfig[4]
//
// Index2 := 3
// nst2 = 2^(Index2 - 2)
// spp2 = FileConfig[1] x FileConfig[2] x nst2
// rn2 = rn3 modulo (spp3 / nst3)
// pn2 = rn2 / (spp2 / nst2)
// ps2 = pn2 x spp2
// cs2 = (spp2 / 2) x 0, (spp2 / 2) x 1
// np2 = FileConfig[3]
//
// Index := 2
// nst = 2^(Index - 2)
// spp = FileConfig[1] x nst
// rn = rn2 modulo (spp2 / nst2)
// pn = rn / (spp / nst)
// ps = pn x spp
// np = FileConfig[2]
// rs = rn - (pn x spp)
// ss = FileConfig[0]
//
// seek position1
// = 64 x ((0 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 0 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0 +
//         (1 x 4) + (5 - (1 x 4)))
// = 64 x (0 + 0 + 16 + 0 + 4 + 1)
// = 64 x 21
// = 1344
//
// seek position2
// = 64 x ((0 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 0 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1 +
//         (1 x 4) + (5 - (1 x 4)))
// = 64 x (0 + 0 + 16 + 8 + 4 + 1)
// = 64 x 29
// = 1856
//
// seek position3
// = 64 x ((0 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 1 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0 +
//         (1 x 4) + (5 - (1 x 4)))
// = 64 x (0 + 32 + 16 + 0 + 4 + 1)
// = 64 x 53
// = 3392
//
// seek position4
// = 64 x ((0 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 1 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1 +
//         (1 x 4) + (5 - (1 x 4)))
// = 64 x (0 + 32 + 16 + 8 + 4 + 1)
// = 64 x 61
// = 3904
//
// To add more records without increasing the size of the records:
// - increment the number of pages
//
// example adding 28th record
//
// array index:                 0    1   2   3   4
// exponent:                    -    -   0   1   2
// - file config section lists: 64 x 4 x 2 x 2 x 2
//
// Use the same formula as above to seek to the 28th record
//
// seek position1
// = 64 x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 0 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0 +
//         (0 x 4) + (3 - (0 x 4)))
// = 64 x (64 + 0 + 16 + 0 + 0 + 3)
// = 64 x 83
// = 5312
//
// seek position2
// = 64 x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 0 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1 +
//         (0 x 4) + (3 - (0 x 4)))
// = 64 x (64 + 0 + 16 + 8 + 0 + 3)
// = 64 x 91
// = 5824
//
// seek position3
// = 64 x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 1 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0 +
//         (0 x 4) + (3 - (0 x 4)))
// = 64 x (64 + 32 + 16 + 0 + 0 + 3)
// = 64 x 115
// = 7360
//
// seek position4
// = 64 x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 1 +
//         (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1 +
//         (0 x 4) + (3 - (0 x 4)))
// = 64 x (64 + 32 + 16 + 8 + 0 + 3)
// = 64 x 123
// = 7872
//
// Breakdown of seek position 1:
//
// = 64           x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 0 +
//   ^^              ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^
//   Segment Size    Page Seek #3          4x Split Block (1st half)
//
//   (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0     + (0 x 4) +
//   ^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^
//   Page Seek #2      2x Split Block (1st half)   Page Seek #1
//
//   (3 - (0 x 4)))
//   ^^^^^^^^^^^^^
//   Record Seek
//
// Breakdown of seek position 2:
//
// = 64           x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 0 +
//   ^^              ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^
//   Segment Size    Page Seek #3          4x Split Block (1st half)
//
//   (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1     + (0 x 4) +
//   ^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^
//   Page Seek #2      2x Split Block (2nd half)   Page Seek #1
//
//   (3 - (0 x 4)))
//   ^^^^^^^^^^^^^
//   Record Seek
//
// Breakdown of seek position 3:
//
// = 64           x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 1 +
//   ^^              ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^
//   Segment Size    Page Seek #3          4x Split Block (2nd half)
//
//   (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 0     + (0 x 4) +
//   ^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^
//   Page Seek #2      2x Split Block (1st half)   Page Seek #1
//
//   (3 - (0 x 4)))
//   ^^^^^^^^^^^^^
//   Record Seek
//
// Breakdown of seek position 4:
//
// = 64           x ((1 x 4 x 2 x 2 x 4) + ((4 x 2 x 2 x 4) / 2) x 1 +
//   ^^              ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^
//   Segment Size    Page Seek #3          4x Split Block (2nd half)
//
//   (1 x 4 x 2 x 2) + ((4 x 2 x 2) / 2) x 1     + (0 x 4) +
//   ^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^       ^^^^^^^
//   Page Seek #2      2x Split Block (2nd half)   Page Seek #1
//
//   (3 - (0 x 4)))
//   ^^^^^^^^^^^^^
//   Record Seek
//
// Variable length file: file layout
//
// 1.   Class ID Byte (long)
// 2.   VarLengthFile object Object ID (long)
// 3.   VarLengthFile object null status (byte)
// 4.   FileInfo Record
// 5.   File Header (dependent on 4.6)
// 6.   variable length record of "Object" objects
//      in standard object data block format
//
// 4.1  object record size (long)
// 4.2  object record (indefinite)
// 4.3  chunk size (long)
// 4.4  initial run (long)
// 4.5  file config (long x MAXCONFIG), MAXCONFIG == 32
// 4.6  header size (long)
// 4.7  highest record (long)
// 4.8  record count
// 4.9  file size (long)
// 4.10 index (unsigned long)
//
// 6.1  Class ID (long)
// 6.2  Object ID (long)
// 6.3  Null object status (byte)
// 6.4  Object data (indefinite)
//
// Variable record format:
//
// [ 1 ][ 2 ][ 3 ][ 4 ][ 5 ][ 6 ]
//
// FileInfo record format:
//
// [ 4.1 ][ 4.2 ][ 4.3 ][ 4.4 ][ 4.5 ][ 4.6 ][ 4.7 ][ 4.8 ][ 4.9 ][ 4.10 ]
//
// Standard object data block format:
//
// [ 6.1 ][ 6.2 ][ 6.3 ][ 6.4 ]
//

