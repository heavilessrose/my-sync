<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="openbasemovil-script" default="dist" basedir=".">

    <!--
        OpenBaseMovil Core Library, foundation of the OpenBaseMovil database and tools
        Copyright (C) 2004-2008 Elondra S.L.

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 2 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.
        If not, see <a href="http://www.gnu.org/licenses">http://www.gnu.org/licenses</a>.
    -->

    <!-- =================================================================== -->
    <!-- Properties                                                          -->
    <!-- =================================================================== -->

    <!-- Properties definition:
            * local.properties contains specific machine paths:

                wtk.home            = path to the home of the Wireless Toolkit

            * build.properties contains proejct settings

    -->
    <property file="../local.properties"/>
    <property file="build.properties"/>
    <property file="../versions.properties" />
    <property name="product.version" value="${openbasemovil-script.version}" />
    <property name="deps.dir" value="${basedir}/../deps" />
    <property name="lib.dir" value="${basedir}/../framework/deploy/lib" />

    <!-- Source directories ++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="dir.src"                value="${basedir}/src"/>
    <property name="dir.src.main"           value="${dir.src}/main"/>
    <property name="dir.src.tools"          value="${basedir}/tools/src/main"/>
    <property name="dir.res"                value="${basedir}/res"/>
    <property name="dir.doc"                value="${basedir}/docs"/>

    <!-- build +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="build.dir"              value="${basedir}/build" />
    <property name="build.lib"              value="${build.dir}/lib" />
    <property name="build.classes"          value="${build.dir}/classes" />
    <property name="build.classes.tools"    value="${build.dir}/classes_tools" />
    <property name="build.classes.debug"    value="${build.dir}/classes_debug" />
    <property name="build.doc"              value="${build.dir}/docs" />

    <property name="file.src.name"          value="${ant.project.name}-${product.version}-src.zip" />
    <property name="file.src.zip"           value="${build.lib}/${file.src.name}" />
    <property name="file.main.name"         value="${ant.project.name}-${product.version}.jar" />
    <property name="file.main.debug.name"   value="${ant.project.name}-${product.version}-debug.jar" />
    <property name="file.main.jar"          value="${build.lib}/${file.main.name}" />
    <property name="file.main.debug.jar"    value="${build.lib}/${file.main.debug.name}" />
    <property name="file.main-basic.name"         value="${ant.project.name}-${product.version}-basic.jar" />
    <property name="file.main-basic.debug.name"   value="${ant.project.name}-${product.version}-basic-debug.jar" />
    <property name="file.main-basic.jar"          value="${build.lib}/${file.main-basic.name}" />
    <property name="file.main-basic.debug.jar"    value="${build.lib}/${file.main-basic.debug.name}" />
    <property name="file.doc.zip"           value="${lib.dir}/${ant.project.name}-${product.version}-apidocs.zip" />

    <property name="file.tools-ec.name"     value="${ant.project.name}-${product.version}-ec.jar" />
    <property name="file.tools-ec.jar"      value="${build.lib}/${file.tools-ec.name}" />
    <property name="file.tools-rt.name"     value="${ant.project.name}-${product.version}-rt.jar" />
    <property name="file.tools-rt.jar"      value="${build.lib}/${file.tools-rt.name}" />

    <property name="build.dist"             value="${build.dir}/dist" />
    <property name="build.deploy"           value="${build.dir}/deploy" />
    <property name="build.deploy.res"       value="${build.deploy}/res" />
    <property name="build.deploy.src"       value="${build.deploy}/src" />
    <property name="build.deploy.lib"       value="${build.deploy}/lib" />
    <property name="build.deploy.doc-api"   value="${build.deploy}/doc/api" />

    <property name="file.dist.src"          value="${build.dist}/${ant.project.name}-${product.version}-src.zip" />
    <property name="file.dist.doc-api"      value="${build.dist}/${ant.project.name}-${product.version}-apidocs.zip" />
    <property name="file.dist.bin"          value="${build.dist}/${ant.project.name}-${product.version}-bin.zip" />

    <!-- libraries +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="lib.core"               value="${lib.dir}/openbasemovil-core-${openbasemovil-core.version}.jar" />

    <!-- paths +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <path id="cldc10.classpath">
        <fileset file="${wtk.home}/lib/cldcapi10.jar" />
        <fileset file="${wtk.home}/lib/midpapi20.jar" />
    </path>

    <path id="classpath">
        <fileset file="${lib.core}" />
    </path>

    <path id="classpath.debug">
        <fileset file="${lib.core}" />
    </path>

    <path id="classpath.tools">
        <fileset file="${file.main.jar}" />
        <fileset file="${lib.core}" />
    </path>

    <!-- Misc properties +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="build.compiler"         value="modern"/>

    <!-- main ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

    <target name="clean">
        <delete failonerror="false" dir="${build.dir}"/>
    </target>

    <target name="init" unless="initialized" >
        <property name="initialized" value="true" />
        <echo message="build.compiler   = ${build.compiler}"/>
        <echo message="user.home        = ${user.home}"/>
        <echo message="java.home        = ${java.home}"/>
        <echo message="ant.home         = ${ant.home}"/>
        <echo message="java.class.path  = ${java.class.path}"/>
        <echo message=""/>
        <available property="jdk1.3+" classname="java.lang.StrictMath"/>
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.classes.debug}"/>
        <mkdir dir="${build.classes.tools}"/>
        <mkdir dir="${build.doc}"/>

        <mkdir dir="${build.dist}" />
        <mkdir dir="${build.deploy}" />
        <mkdir dir="${build.deploy.res}" />
        <mkdir dir="${build.deploy.src}" />
        <mkdir dir="${build.deploy.lib}" />
        <mkdir dir="${build.deploy.doc-api}" />


    </target>

    <path id="declare.path">
        <fileset file="${lib.dir}/text-resource-packer.jar" />
        <fileset file="${deps.dir}/antenna-bin.jar" />
    </path>

    <target name="declare" depends="init">
        <taskdef resource="antenna.properties" classpathref="declare.path"/>
        <taskdef resource="resourcePacker.properties" classpathref="declare.path"/>
        <!--<typedef resource="resourceFile.properties" classpathref="declare.path"/>-->
    </target>

    <target name="compile" depends="declare">
        <wtkbuild
                srcdir="${dir.src.main}"
                destdir="${build.classes}"
                preverify="true"
                debug="off"
                optimize="on"
                source="${javac.source}"
                target="${javac.target}"
                bootclasspathref="cldc10.classpath"
                classpathref="classpath"
        />
    </target>

    <target name="compile-debug" depends="declare">
        <wtkbuild
                srcdir="${dir.src.main}"
                destdir="${build.classes.debug}"
                preverify="true"
                debug="on"
                optimize="off"
                source="${javac.source}"
                target="${javac.target}"
                bootclasspathref="cldc10.classpath"
                classpathref="classpath.debug"
        />
    </target>

    <target name="compile-tools" depends="pack">
        <javac
                srcdir="${dir.src.tools}"
                destdir="${build.classes.tools}"
                debug="off"
                optimize="on"
                classpathref="classpath.tools"
        />
        <copy todir="${build.classes.tools}">
            <fileset dir="${lib.dir}/core.res">
                <include name="*" />
            </fileset>
        </copy>
    </target>

    <target name="pack" depends="compile">
        <jar basedir="${build.classes}"
             destfile="${file.main.jar}"
                />
    </target>

    <target name="pack-debug" depends="compile-debug">
        <jar basedir="${build.classes.debug}"
             destfile="${file.main.debug.jar}"
                />
    </target>

    <target name="pack-basic" depends="compile">
        <jar basedir="${build.classes}"
             destfile="${file.main-basic.jar}"
        >
            <exclude name="bm/vm/ec/**" />
        </jar>
    </target>

    <target name="pack-basic-debug" depends="compile-debug">
        <jar basedir="${build.classes.debug}"
             destfile="${file.main-basic.debug.jar}"
                >
                    <exclude name="bm/vm/ec/**" />
                </jar>
    </target>

    <target name="pack-ec" depends="compile-tools">
        <jar basedir="${build.classes.tools}"
             destfile="${file.tools-ec.jar}"
        >
            <include name="bm/vm/ec/ec.class" />
        </jar>
    </target>

    <target name="pack-rt" depends="compile-tools">
        <!--<manifest file="${file.rt.manifest}">-->
            <!--<attribute name="Class-Path: lib"-->
        <!--</manifest>-->
        <jar basedir="${build.classes.tools}"
             destfile="${file.tools-rt.jar}"
        >
            <include name="bm/vm/ec/bms.class" />
        </jar>
    </target>

    <target name="pack-src">
        <zip basedir="${basedir}"
            destfile="${file.src.zip}"
            >
            <exclude name="build/**" />
            <exclude name="misc/**" />
            <exclude name="basemovil-script.*" />
            <exclude name="classes/**" />
            <exclude name="tools/tools.iml" />
            <exclude name="**/.svn/**" />
        </zip>
    </target>

    <target name="pack-tools" depends="compile-tools">

    </target>

    <target name="pack-all"
            depends="pack, pack-basic, pack-debug, pack-basic-debug, pack-src,
            pack-ec, pack-rt" />

    <target name="javadoc">
        <javadoc
            packagenames    = "bm.*"
            defaultexcludes = "yes"
            destdir         = "${build.doc}"
            author          = "true"
            version         = "true"
            use             = "true"
            stylesheetfile  = "${lib.dir}/stylesheet.css"
            windowtitle     = "${javadoc.window-title}"
            >
            <packageset
                dir="${dir.src.main}"
                defaultexcludes="yes"
                >
                <include name="bm/**" />
            </packageset>
        </javadoc>
        <zip basedir="${build.doc}" destfile="${file.doc.zip}" />
    </target>

    <target name="check-jars">
        <uptodate property="update-needed">
            <srcfiles
                dir     = "${build.lib}"
                includes= "*.jar"
                />
            <mapper
                type    = "identity"
                to      = "${lib.dir}/"
                />
        </uptodate>
    </target>

    <target name="update-resources" depends="declare">
        <resource-pack out="${lib.dir}/script.res/bm-script"
                files="${dir.res}/bm-script" />
    </target>

    <target name="update-mylibraries" depends="check-jars, declare, update-resources" if="update-needed">
    <!--<target name="update-mylibraries" depends="check-jars, declare" if="update-needed">-->
        <copy todir="${lib.dir}/">
            <fileset dir="${build.lib}" includes="*.jar" />
        </copy>
    </target>

    <target name="dist" depends="clean, javadoc, pack, pack-basic, pack-debug, pack-basic-debug">

        <!-- Pack sources and resources -->
        <copy todir="${build.deploy}">
            <fileset dir="${basedir}/license" includes="**/*" />
        </copy>
        <resource-pack
                out="${build.deploy.res}/bm-script"
                files="${dir.res}/bm-script"
                />
        <copy todir="${build.deploy.src}">
            <fileset dir="${dir.src.main}" includes="**/*" />
        </copy>
        <zip destfile="${file.dist.src}" compress="true">
            <fileset dir="${build.deploy}">
                <include name="README" />
                <include name="COPYING" />
                <include name="license/**" />
                <include name="res/**" />
                <include name="src/**" />
            </fileset>
        </zip>

        <!-- pack api docs -->
        <copy todir="${build.deploy.doc-api}">
            <fileset dir="${build.doc}" />
        </copy>
        <zip destfile="${file.dist.doc-api}" compress="true">
            <fileset dir="${build.deploy}">
                <include name="README" />
                <include name="COPYING" />
                <include name="license/**" />
                <include name="doc/api/**" />
            </fileset>
        </zip>

        <!-- copy pdf docs -->
        <copy todir="${build.dist}">
            <fileset dir="${dir.doc}" includes="**/*.pdf" />
        </copy>

        <!-- create bin packages -->
        <copy todir="${build.deploy.lib}">
            <fileset dir="${build.lib}" includes="*.jar" />
            <fileset dir="${basedir}/lib" includes="*.jar" />
        </copy>
        <zip destfile="${file.dist.bin}" compress="true">
            <fileset dir="${build.deploy}" includes="lib/**"/>
        </zip>
    </target>

    <target name="redistribute"
            depends="clean, pack-all, update-mylibraries" />

</project>