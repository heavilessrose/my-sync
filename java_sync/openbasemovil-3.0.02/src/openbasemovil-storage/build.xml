<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="openbasemovil-storage" default="pack" basedir=".">

    <!--
        OpenBaseMovil Core Library, foundation of the OpenBaseMovil database and tools
        Copyright (C) 2004-2008 Elondra S.L.

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 2 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.
        If not, see <a href="http://www.gnu.org/licenses">http://www.gnu.org/licenses</a>.
    -->

    <!-- =================================================================== -->
    <!-- Properties                                                          -->
    <!-- =================================================================== -->

    <!-- Properties definition:
            * local.properties contains specific machine paths:

                wtk.home            = path to the home of the Wireless Toolkit

            * build.properties contains proejct settings
    -->
    <property file="../local.properties"/>
    <property file="build.properties"/>
    <property file="../versions.properties" />
    <property name="product.version" value="${openbasemovil-storage.version}" />
    <property name="deps.dir" value="${basedir}/../deps" />
    <property name="lib.dir" value="${basedir}/../framework/deploy/lib" />

    <!-- Source directories ++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="dir.src"                value="${basedir}/src"/>
    <property name="dir.src.main"           value="${dir.src}/main"/>
    <property name="dir.res"                value="${basedir}/res"/>

    <!-- Build directories +++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="build.dir"              value="${basedir}/build"/>
    <property name="build.comment"          value="${build.dir}/comment"/>
    <property name="build.preprocess"       value="${build.dir}/preprocess"/>
    <property name="build.preprocess.debug" value="${build.dir}/preprocess-debug"/>
    <property name="build.classes"          value="${build.dir}/classes"/>
    <property name="build.classes.main"     value="${build.dir}/classes/main"/>
    <property name="build.classes.debug"    value="${build.dir}/classes-debug"/>
    <property name="build.classes.debug.main" value="${build.dir}/classes-debug/main"/>
    <property name="build.classes.test"     value="${build.dir}/test-classes"/>
    <property name="build.lib"              value="${build.dir}/lib"/>
    <property name="build.doc"              value="${build.dir}/docs"/>
    <property name="build.deploy"           value="${build.dir}/deploy"/>
    <property name="build.deploy.lib"       value="${build.deploy}/lib"/>
    <property name="build.deploy.doc"       value="${build.deploy}/doc"/>

    <!-- Archives ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="file.main.name"         value="${ant.project.name}-${product.version}.jar" />
    <property name="file.obfuscated.name"   value="${ant.project.name}-${product.version}-redist.jar" />
    <property name="file.obfuscated.debug.name"   value="${ant.project.name}-${product.version}-redist-debug.jar" />
    <property name="file.main.jar"          value="${build.lib}/${file.main.name}" />
    <property name="file.main.debug.name"   value="${ant.project.name}-${product.version}-debug.jar" />
    <property name="file.main.debug.jar"    value="${build.lib}/${file.main.debug.name}" />
    <property name="file.obfuscated.jar"    value="${build.lib}/${file.obfuscated.name}" />
    <property name="file.obfuscated.debug.jar"    value="${build.lib}/${file.obfuscated.debug.name}" />
    <property name="file.redistribute.zip"  value="${build.lib}/${ant.project.name}-${product.version}.zip" />
    <property name="file.doc.zip"           value="${lib.dir}/${ant.project.name}-${product.version}-apidocs.zip" />

    <!-- Misc properties +++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    <property name="build.compiler"         value="modern"/>
    <property name="javadoc.window-title"   value="${product.description} v${product.version}"/>

    <!-- =================================================================== -->
    <!-- Paths                                                               -->
    <!-- =================================================================== -->
    <property name="lib.core"
              value="${lib.dir}/openbasemovil-core-${openbasemovil-core.version}.jar" />
    <property name="lib.errorlog"
              value="${lib.dir}/openbasemovil-errorlog-${openbasemovil-errorlog.version}.jar" />

    <property name="libraryjars"
              value="${java.home}/lib/rt.jar;${lib.core}"
            />

    <path id="common.class.path">
        <pathelement location="${lib.core}" />
        <pathelement location="${lib.errorlog}" />
    </path>

    <target name="clean">
        <delete failonerror="false" dir="${build.dir}"/>
    </target>

    <target name="init" unless="initialized" >
        <property name="initialized" value="true" />
        <echo message="build.compiler   = ${build.compiler}"/>
        <echo message="user.home        = ${user.home}"/>
        <echo message="java.home        = ${java.home}"/>
        <echo message="ant.home         = ${ant.home}"/>
        <echo message="java.class.path  = ${java.class.path}"/>
        <echo message=""/>
        <available property="jdk1.3+" classname="java.lang.StrictMath"/>
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.lib}"/>
        <mkdir dir="${build.deploy}"/>
        <mkdir dir="${build.deploy.lib}"/>
        <mkdir dir="${build.deploy.doc}"/>

        <mkdir dir="${build.classes}"/>
        <mkdir dir="${build.comment}" />
        <mkdir dir="${build.preprocess}" />
        <mkdir dir="${build.preprocess.debug}" />
        <mkdir dir="${build.classes.main}"/>
        <mkdir dir="${build.classes.debug}"/>
        <mkdir dir="${build.classes.debug.main}"/>
        <mkdir dir="${build.classes.test}"/>

        <mkdir dir="${build.doc}"/>
    </target>

    <path id="declare.path">
        <fileset file="${lib.dir}/text-resource-packer.jar" />
        <fileset file="${deps.dir}/antenna-bin.jar" />
    </path>

    <target name="declare" depends="init">
        <taskdef resource="antenna.properties" classpathref="declare.path"/>
        <taskdef resource="resourcePacker.properties" classpathref="declare.path"/>
        <!--<typedef resource="resourceFile.properties" classpathref="declare.path"/>-->
    </target>

    <target name="comment">
        <taskdef
                resource="commenter.properties"
                classpath="${lib.dir}/openbasemovil-commenter.jar"
                />
        <commenter in="${dir.src.main}" out="${build.comment}"
                patterns="import bm.core.log., Log log, log.">
        </commenter>
    </target>

    <target name="preprocess" depends="comment, declare">
        <wtkpreprocess
                srcdir="${build.comment}"
                destdir="${build.preprocess}"
                />
    </target>

    <target name="preprocess.debug" depends="declare">
        <wtkpreprocess
                srcdir="${dir.src.main}"
                destdir="${build.preprocess.debug}"
                symbols="debug_mode"
                />
    </target>

    <target name="compile" depends="preprocess">
        <wtkbuild
                srcdir="${build.preprocess}"
                destdir="${build.classes.main}"
                preverify="true"
                debug="off"
                optimize="on"
                source="${javac.source}"
                target="${javac.target}"
        >
            <classpath>
                <path refid="common.class.path"/>
            </classpath>
        </wtkbuild>
    </target>

    <target name="compile-debug" depends="preprocess.debug">
        <wtkbuild
                srcdir="${build.preprocess.debug}"
                destdir="${build.classes.debug.main}"
                preverify="true"
                debug="on"
                optimize="off"
                source="${javac.source}"
                target="${javac.target}"
        >
            <classpath>
                <path refid="common.class.path"/>
            </classpath>
        </wtkbuild>
    </target>

    <target name="pack" depends="compile">
        <jar basedir="${build.classes.main}" destfile="${file.main.jar}" />
    </target>

    <target name="pack-debug" depends="compile-debug">
        <jar basedir="${build.classes.debug.main}" destfile="${file.main.debug.jar}" />
    </target>

    <target name="javadoc">
        <javadoc
            packagenames    = "bm.*"
            defaultexcludes = "yes"
            destdir         = "${build.doc}"
            author          = "true"
            version         = "true"
            use             = "true"
            stylesheetfile  = "${lib.dir}/stylesheet.css"
            windowtitle     = "${javadoc.window-title}"
            >
            <packageset
                dir="${dir.src.main}"
                defaultexcludes="yes"
                >
                <include name="bm/**" />
            </packageset>
            <classpath refid="common.class.path"/>
        </javadoc>
        <zip basedir="${build.doc}" destfile="${file.doc.zip}" />
    </target>

    <target name="check-jars">
        <uptodate property="update-needed">
            <srcfiles
                dir     = "${build.lib}"
                includes= "*.jar"
                />
            <mapper
                type    = "identity"
                to      = "${lib.dir}"
                />
        </uptodate>
    </target>

    <target name="update-resources" depends="declare">
        <resource-pack out="${lib.dir}/storage.res/bm-storage"
                files="${dir.res}/bm-storage" />
    </target>

    <target name="update-mylibraries" depends="check-jars, declare, update-resources" if="update-needed">
        <copy todir="${lib.dir}">
            <fileset dir="${build.lib}" includes="*.jar" />
        </copy>
    </target>

    <target name="bundle" depends="clean, javadoc">
        <copy todir="${build.deploy.doc}">
            <fileset dir="${build.doc}" />
        </copy>
        <copy todir="${build.deploy.lib}">
            <fileset file="${file.obfuscated.jar}" />
        </copy>
        <move
                file="${build.deploy.lib}/${file.obfuscated.name}"
                tofile="${build.deploy.lib}/${file.main.name}"
                />
        <copy todir="${build.deploy.lib}">
            <fileset file="${file.obfuscated.debug.jar}" />
        </copy>
        <move
                file="${build.deploy.lib}/${file.obfuscated.debug.name}"
                tofile="${build.deploy.lib}/${file.main.debug.name}"
                />
        <zip destfile="${file.redistribute.zip}" compress="true">
            <fileset dir="${build.deploy}" />
        </zip>
    </target>

    <target name="redistribute" depends="clean, pack, pack-debug, update-mylibraries" />

</project>
